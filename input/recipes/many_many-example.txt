===== many_many relationship example =====

This guide is aimed at users who have already completed the basic SilverStripe tutorials.

This code example below sets up a basic many_many relationship between an Article and a Category. There are three classes involved:

  * ''ArticleHolder''
  * ''Article''
  * ''Category''

In this example we will create these three classes, and link them together using a many_many relationship. The idea is to show how you connect them together using SilverStripe. 





==== ArticleHolder.php ====

The ArticleHolder class is a 'container' class which groups the Article pages within the CMS. It is also used to add categories to the database so an article can have many categories.

There are no joins in terms of database from this class (ArticleHolder) to Article or Category. It serves only as a container.

<code php>
<?php

class ArticleHolder extends Page {
	
   // default children of this page are of Article class
   static $default_child = 'Article';

   // only allow Article pages as children of this page	
   static $allowed_children = array('Article');

   /**
    * Create some CMS fields to support this class
    */	
   function getCMSFields() {
      $fields = parent::getCMSFields();

      // Set up a header and a note below it about what the category table field does.
      $fields->addFieldToTab('Root.Content.Categories', new HeaderField('Article categories', 2));
      $fields->addFieldToTab('Root.Content.Categories', new LiteralField('CategoryNotes',
         '<p>This table allows you to create and delete the categories associated with article pages within the system.</p>'
      ));

      // Setup a table field to allow editing of categories within the system
      $categoryTable = new TableField('Categories', 'Category', Category::$field_names, Category::$field_types);

      // Set permissions of the table to add categories only. Deleting is disabled because
      // if you delete one currently in use, there is no functionality to ensure the related
      // data is deleted as well.
      $categoryTable->setPermissions(array('add'));

      // Add the table field to the tab
      $fields->addFieldToTab('Root.Content.Categories', $categoryTable);
      return $fields;
   }

}

class ArticleHolder_Controller extends Page_Controller {

   /**
    * Returns all the articles that are children of the current page.
    * It allows <% control Articles %> to be called in the ArticleHolder.ss template.
    */
   function Articles() {
      return DataObject::get('Article', "ParentID = {$this->ID}");
   }

}

?>
</code>










==== Article.php ====

Article is the class which can have many categories associated with it, and vice versa. You can call <% control Categories %> in the template to retrieve the categories that are associated with it through the use of $many_many.

To get the associated data when creating a new function, you can call ''$this->getManyManyComponents('Categories')'' which returns a DataObjectSet.

<code php>
<?php
 
class Article extends Page {
 
   // setup an author field in the database	
   static $db = array(
      'Author' => 'Varchar'
   );
 
   // an Article can have many Category objects associated with it.
   // calling $this->getManyManyComponents('Categories') retrieves the associated Category objects.
   static $many_many = array(
      'Categories' => 'Category'
   );
 
   // this classes default parent is an ArticleHolder page type
   static $default_parent = 'ArticleHolder';
 
   /**
    * Create some CMS fields to support this class
    */
   function getCMSFields() {
      $fields = parent::getCMSFields();
 
      // add the author field to the Main tab in the CMS
      $fields->addFieldToTab('Root.Content.Main', new TextField('Author'), 'Content');
 
      // retrieve all the category objects in the database 
      $categoryList = DataObject::get('Category');
 
      // add a checkbox set field to the Main tab in the CMS, the checkboxes use all the category
      // objects in the system, so if you created 5 categories on the ArticleHolder class, then
      // it shows 5 checkboxes here to select.
      $fields->addFieldToTab('Root.Content.Categories', new CheckboxSetField('Categories', '', $categoryList));
 
      return $fields;
   }
	
}
 
class Article_Controller extends Page_Controller {

}
 
?>
</code>










==== Category.php ====

Category is a DataObject class to store the category information in the database. As such, it does not extend Page because it doesn't require page functions, as it is only a data container. There is something special here, it has a $belongs_many_many to associate it with Article, for which we applied a $many_many to it earlier. A table called Article_Categories will be created with a pair of IDs to connect the two classes together.

<code php>
<?php

class Category extends DataObject {

   // create a Title database field for Category
   static $db = array(
      'Title' => 'Varchar'
   );

   // Used for TableField. These are the field types.
   // Refer to getCMSFields() on ArticleHolder for how it is used.
   static $field_types = array(
      'Title' => 'TextField'
   );

   // Used for TableField. These are the field names.
   // Refer to getCMSFields() on ArticleHolder for how it is used.
   static $field_names = array(
      'Title' => 'Category Name'
   );
 
   // Defines the join in the referenced class as $belongs_many_many.
   // a new table, (this-class)_(relationship-name), will be created with a pair of ID fields.
   static $belongs_many_many = array(
      'Articles' => 'Article'
   );

}

?>
</code>
