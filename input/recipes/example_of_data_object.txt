In this page, we will create a dataobject that "attaches" logos to your homepage.  What we have done here is to take some of the general functions of the dataobject and moved them to a more general class, allowing the rapid creation of several of these dataobjects.

Create a file called SponsorDataObject.php in your code folder

<code php>

class SponsorDataObject extends ComplexTableDataObject {

	static $db = Array(
		"Title" => "Varchar(255)",
		"Description" => "Varchar(255)",
		"Website" => "Varchar(255)",
	);


	static $has_one = array(
		"Logo" => "Image",
		"Parent" => "HomePage"
	);
	function getDatabaseFields() {
		$array = array_merge(self::$db, self::$has_one);
		$data = array();
		foreach($array as $key=>$value) {
			if($key != "Parent") {
				$data[$key] = $value;
			}
		}
		return $data;
	}
  	/*
				FieldDefinitions provides a summary of every field
				FROM $db or $has_one we have:
					0 dbfieldname,
					1 dbformat,
				now we are adding to this:
					2 formfield, 3 required field, 4 show in table list (not just pop-up)
				*/

	function getFormFields () {
		return  Array (
			Array(new TextField('Title', 'Title'), 1, 1),
			Array(new TextField('Description', 'Description'),1,1),
			Array(new TextField('Website', 'Website'),1,1),
			Array(new ImageField('Logo', 'Logo to use'),0,0)
		);
	}
}


</code>

Now, here is the general code for the dataobject.  Create another file called ComplexTableDataObject.php in your code folder

<code php>


class ComplexTableDataObject extends DataObject {
	static $db = array();
	static $fieldDefinitions = Array();

	function start() {
		self::$fieldDefinitions = $this->getFieldDefinitions();
	}

	function getCMSFields() {
		$data = self::$fieldDefinitions;
		foreach($data as $ds) {
			$formFieldArray[] = $ds[2];
		}
		$fieldSet = new FieldSet( $formFieldArray);
		return $fieldSet;
	}

	function requiredFieldsObject() {
		$data = self::$fieldDefinitions;
		foreach($data as $ds) {
			if($ds[0] && $ds[3]) {
				$fieldsArray[] = $ds[0];
			}
		}
		return new RequiredFields($fieldsArray);
	}

	function complexTableFields() {
		$data = self::$fieldDefinitions;
		foreach($data as $ds) {
 			if($ds[0] && $ds[4]) {
				$fieldsArray[$ds[0]] = $ds[2]->title;
			}
		}
		return $fieldsArray;
	}

	function getFieldDefinitions() {
		$databaseFields = $this->getDatabaseFields();
		$data = $this->getFormFields();
		$dataNew = Array();
		$i = 0;
		foreach($databaseFields as $key=>$value) {
			$dataNew[$i][0] = $key;
			$dataNew[$i][1] = $value;
			$dataNew[$i][2] = $data[$i][0];
			$dataNew[$i][3] = $data[$i][1];
			$dataNew[$i][4] = $data[$i][2];
			$i++;
		}
		return $dataNew;
	}


}

</code>

Next, you can add a field on your homepage in the CMS that allows you to edit the field:

<code php>
class HomePage extends Page {

	static $has_many = array(
		"Sponsors" => "SponsorDataObject"
	);

	function getCMSFields() {
		$fields = parent::getCMSFields();
		$dataObject = new SponsorDataObject();
		$dataObject->start();
		$complextTableFields = $dataObject->complexTableFields();
		$table = new ComplexTableField  (
			$this,
			'Sponsors', // Fieldname
			'SponsorDataObject', // Classname
			$complextTableFields,
			'getCMSFields'
		);
		$table->setParentClass("HomePage");
		$fields->addFieldToTab('Root.Content.Sponsors', $table);
		return $fields;
	}
}

Class HomePage_Controller extends Page_Controller {
 ...
 	function SponsorList() {
		return DataObject::get("SponsorDataObject");
	}
 ...

}

</code>


To make this work in your templates, add the following:

<code html>
<ulid="SponsorList">
<% control SponsorList %>
	<li><a href="$Website" title="$Title">$Logo.SetWidth(98)</a>$Description</li>
<% end_control %>
</ul>
</code>

