====== Upgrading 2.4.1 ======
===== Changelogs =====

 * http://open.silverstripe.org/wiki/ChangeLog/2.4.1-rc1

===== Upgrading Notes =====

See [[http://open.silverstripe.org/wiki/ChangeLog/2.4.1-rc1?version=2#APIChanges|API Changes]].
==== Security: File->setName() and File->Filename handling =====

Setting properties on //File// and //Image// are not reflected on the filesystem until //write()// is called. This was a necessary change to fix a security vulnerability around File->setName() and file extension validation. This vulnerability requires a user to be logged-in to the CMS (see [[http://open.silverstripe.org/ticket/5693|#5693]]).

This means that CMS users with access to "Files & Images" can no longer rename uploaded files to invalid extensions in 2.4.1. In SilverStripe 2.3.8, this restriction only applies when //AssetAdmin::$apply_restrictions_to_admin// is set to TRUE.

==== Security: Installation in "live mode" by default =====

SilverStripe used to allow setting the [[:environment-management|environment type]] ("dev mode", "test mode" or "live mode") from within the installer, through //Director::set_dev_servers()//, //Director::set_test_servers()// and //Director::set_live_servers()//. 

On webservers with direct IP to domain mapping (e.g. no //VirtualHost// directives in Apache), it is possible to spoof domain information in HTTP requests. This can lead to "live" environments being set to "dev" mode, allowing administrative actions like //dev/build// without access control. 
Note: The CMS is still secured through login in "dev mode".

We recommend setting environment types through a [[:environment-management|_ss_environment.php]] file instead:

<code php>
<?php
define('SS_ENVIRONMENT_TYPE', 'dev');
// ...
</code>

To put a "live" or "test" environment into "dev mode" temporarily (when logged in as an administrator),
you can append //?isDev=1// to any SilverStripe URL. This should give you more information than the common
"Website Error" that is shown when the website is in "live mode".

IMPORTANT: If you have an existing installation, we advise to remove any //Director::set_dev_servers()// directives from your //mysite/_config.php//.

==== Security: Disallow direct execution of *.php files =====

The only PHP file that should be executable through the webserver
is //sapphire/main.php//, our main bootstrapper which kicks of URL routing.
All other PHP files in SilverStripe core and modules are included
by this bootstrapper, and don't need direct access through a URL.

On misconfigured webservers, accessing these files directly through URL can lead to
information disclosure through PHP error messages. The production configuration 
recommended by [[http://www.php.net/manual/en/errorfunc.configuration.php#ini.display-errors|php.net]] 
will fix this issue:

<code>
display_errors = 0
</code>

For additional protection, we now include //.htaccess// files in all SilverStripe core folders
disallowing access to //*.php// files. Note: This only applies to webservers that understand
the //.htaccess// format, mainly Apache.

''Important'': Consider copying //mysite/.htaccess// to any other SilverStripe
modules and folders you might have created in your own project.

==== Security: New members might be saved without password encryption ====

Fixed password encryption when saving members through the "Add Member" dialog in the "Security" admin. The saving process was disregarding password encyrption and saving them as plaintext ([[http://open.silverstripe.org/ticket/5772|#5772]]). The issue was introduced in 2.4.0 - if you have created any new members through "Add Member" since then (not the inline member table), please re-encrypt all existing passwords using this task:

<code>
http://localhost/dev/tasks/EncryptAllPasswordsTask
</code>
==== Date/Time format handling in CMS =====

Classes like DateField, TimeField and DatetimeField are now aware of member-specific formats which can be set in //admin/myprofile// (linked on the lower right footer in the CMS interface). See [[:i18n]] for more details.

Example: Setting German date formats in //mysite/_config.php//:
<code>
i18n::set_locale('de_DE');
i18n::set_date_format('dd.MM.YYYY');
i18n::set_time_format('HH:mm');
</code>

Please note that these form fields use [[http://framework.zend.com/manual/en/zend.date.constants.html#zend.date.constants.selfdefinedformats|ISO date format]], not PHP's built-in [[http://nz.php.net/manual/en/function.date.php|date()]].

To set the locale and date/time formats for all existing members, use the following SQL (adjust to your preferred formats):
<code>
UPDATE `Member` SET `Locale` = 'de_DE', `DateFormat` = 'dd.MM.YYYY', `TimeFormat` = 'HH:mm';
</code>

==== Changed permission checks for decorators on DataObject->can*()  ====

Access checks in the SiteTree class can have their access checks extended, for example to influence SiteTree->canEdit(). In 2.4.0, it was only possible to explicitly deny an action by returning FALSE, returning TRUE wouldn't have any effect. The new behaviour has three states:

  * FALSE: Disallow this permission, regardless of what other decorators say 
  * TRUE: Allow this permission, as long as no other decorators return false 
  * NULL: Don't affect the outcome

To clarify: Leaving existing decorators unchanged might mean that you allow actions that were previously denied (See [[http://open.silverstripe.org/changeset/104669|r104669]]).

<code>
// In mysite/_config.php
Object::add_extension('SiteTree', 'MyDecorator');

// 2.4.0
class MyDecorator extends DataObjectDecorator {
	function canEdit($member) {
		if(Permission::checkMember($member, 'MYPERMISSION')) {
			return true;
		} else {
			return false;
		}
	}
}

// 2.4.1
class MyDecorator extends DataObjectDecorator {
	function canEdit($member) {
		if(Permission::checkMember($member, 'MYPERMISSION')) {
			return null; // Means the permission check will be ignored, instead of forced to TRUE
		} else {
			return false;
		}
	}
}
</code>

==== Removed image editor sourcecode ====

This feature was disabled for a while, and has now been removed from the source tree as well. Please please use thirdparty modules instead, e.g. "[[http://github.com/nyeholt/silverstripe-pixlr|silverstripe-pixlr]]" ([[http://open.silverstripe.org/changeset/104987|r104987]]).

==== URL Transliteration ====

Non-ASCII characters like [[http://en.wikipedia.org/wiki/Macron|macrons]] or [[http://en.wikipedia.org/wiki/Germanic_umlaut|umlauts]] URLs are now transliterated. This means that special characters are replaced with their ASCII equivalents rather than just removed. This does not affect existing URLs, but will impact existing pages when their title is changed.

<code>
Title: "Brötchen für alle!"
URL in 2.4.0: "brtchen-fr-alle"
URL in 2.4.1: "broetchen-fuer-alle"
</code>

==== Removed Classes =====

 * AutocompleteTextField