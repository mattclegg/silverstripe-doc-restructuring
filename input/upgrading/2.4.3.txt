====== Upgrading 2.4.3 ======
===== Changelogs =====

 * http://open.silverstripe.org/wiki/ChangeLog/2.4.3-rc1

===== Upgrading Notes =====

==== Important: If you are running PHP as FastCGI with Apache =====

Your development environment, or production web host may be running PHP as FastCGI with Apache. If this is the case, there is a regression in 2.4.3 which will break your site. There are two ways to resolve this problem:

  - Don't upgrade to 2.4.3 for now, until 2.4.4 is released
  - Patch the assets/.htaccess file like this: http://open.silverstripe.org/changeset/113809

This does **NOT** affect IIS, or other web servers that don't understand .htaccess files.

If you're not sure whether PHP is running as FastCGI in your server environment, please check the output of phpinfo(). The easiest way to do this is to open mysite/_config.php and add phpinfo() to the bottom of the file, then browse to your site to see the environment information.

Forum references of where the community have had issues:

  * http://silverstripe.org/installing-silverstripe/show/14878
  * http://www.silverstripe.org/general-questions/show/14861

==== Important: Add manual request forgery protection to destructive controller actions ====

Cross Site Request Forgery (CSRF) allows an attacker to initiate unauthorized actions against a victim with a valid login to a target site in the same browser session, e.g. a login to SilverStripe CMS ([[http://shiflett.org/articles/cross-site-request-forgeries|read more about CSRF]]).

While SilverStripe protects form submissions from CSRF automatically, destructive GET and POST actions in subclasses of //Controller// are vulnerable without manual checks.

**You will need to review any custom subclasses of //RequestHandler// and //Controller// (including subclasses of //FormField//), and add manual checks.** Best practice is to return a "//400 Bad Request//" HTTP error when the CSRF check fails.

Also review the method signatures of any form actions - these are only protected automatically with the correct count of parameters (//$data, $form// instead of //$request//).


<code php>
// Form field actions
class MyFormField extends FormField {

  // Form fields always have a reference to their form. 
  // Use the form-specific token instance.
  function delete($request) {
    $token = $this->getForm()->getSecurityToken();
    if(!$token->checkRequest($request)) return $this->httpError(400);
  
    // valid form field delete action
  }
}
  
// Controller actions (GET and POST) without form
class MyController extends Controller {

  // Manually adds token to link
  function DeleteLink() {
    $token = SecurityToken::inst();
    $link = Controller::join_links($this->Link(), 'delete');
    // will add "?SecurityID=<random value>"
    $link = $token->addToUrl($link); 
    return $link;
  }

  // Controller actions pass through the request object,
  // not called through a form.
  // Use a global token instance.
  function delete(SS_HTTPRequest $request) {
    $token = SecurityToken::inst();
    if(!$token->checkRequest($request)) return $this->httpError(400);
  
    // valid controller delete action
  }
}

// Controller actions (GET and POST) with form
class MyController extends Controller {
  
  // Forms have CSRF protection turned on by default,
  // will add a HiddenField instance called "SecurityID"
  function Form() {
    return new Form(
      $this, 'Form', new FieldSet(), new FieldSet(new FormAction('submit'))
    );
  }
  
  // Form->httpSubmission() checks for CSRF automatically,
  // but you need to include both parameters in the method signature.
  function submit($data, Form $form) {
    // valid submit action
  }
  
}
</code>

Note: It is regarded as good practice in HTTP to only have destructive actions in POST submissions rather than GET links.

If you have overwritten any CMS templates (based on LeftAndMain), you will need to update them to include "SecurityID" parameter in all manually created forms.

Affected classes and methods:

  * AssetAdmin->addfolder()
  * AssetAdmin->deletefolder()
  * AssetAdmin->deleteunusedthumbnails()
  * AssetAdmin->removefile()
  * AssetTableField
  * CMSMain->addpage()
  * CMSMain->buildbrokenlinks()
  * CMSMain->createtranslation()
  * CMSMain->duplicate()
  * CMSMain->duplicatewithchildren()
  * CMSMain->publishall()
  * CMSMain->restore()
  * CMSMain->rollback()
  * CMSMain->unpublish()
  * CommentTableField
  * ComplexTableField
  * LeftAndMain->ajaxupdateparent()
  * LeftAndMain->ajaxupdatesort()
  * LeftAndMain->deleteitems()
  * MemberTableField
  * MemberTableField->addtogroup()
  * MemberTableField->delete()
  * MemberTableField_ItemRequest->delete()
  * PageComment
  * PageComment_Controller
  * SecurityAdmin->addgroup()
  * SecurityAdmin->addmember()
  * SecurityAdmin->MemberForm()
  * SecurityAdmin->removememberfromgroup()
  * SecurityAdmin->savemember()
  * TableListField

==== Usage of Controller::join_links() to concatenate links now mandatory ====

The [[http://api.silverstripe.org/2.4/sapphire/control/Controller.html#methodjoin_links|Controller::join_links()]] method to create links within SilverStripe controllers is now mandatory. This method ensures that links with existing GET parameters don't break through string concatenation. 

<code php>
// bad
$link = $this->Link() . 'export?csv=1';

// good
$link = Controller::join_links($this->Link(), 'export', '?csv=1');
</code>

Full controller example:
<code php>
class MyController extends Controller {

	function export($request) {
		// ...
	}
	
	function Link($action = null) {
		return Controller::join_links('MyController', $action);
	}

	function ExportLink() {
		return Controller::join_links($this->Link('export'), '?csv=1');
	}
}
</code>

Using this method is particularly important for any custom [[http://api.silverstripe.org/2.4/forms/fields-relational/TableListField.html|TableListField]] or [[http://api.silverstripe.org/2.4/forms/fields-relational/ComplexTableField.html|ComplexTableField]] subclasses and any [[http://api.silverstripe.com/2.4/cms/core/LeftAndMain.html|LeftAndMain]] subclass for the CMS UI. These classes in particular were refactored to secure destructive links against Cross Site Request Forgery (CSRF). This is achieved via a mandatory "SecurityID" GET parameter appended to the base link.

==== Auto-disabled "SecurityID" field in FunctionalTest ====

"SecurityID" tokens are now disabled by default in unit tests, to make form submissions easier.
You can manually enable security tokens, either globally or for a specific form.

<code php>
class MyTest extends SapphireTest {

	// option 1: enable for all forms created through this test
	function setUp() {
		parent::setUp();
		SecurityToken::enable();
	}
	
	// option 2: enable for one specific form
	function testMyForm() {
		$form = new MyForm();
		$form->enableSecurityToken();
	}
}
</code>


