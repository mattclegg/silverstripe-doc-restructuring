====== Introduction ======
This class represents a set of [[dataobject|database objects]], such as the results of a query. It is the base for all [[datamodel]]-related querying. It implements the [[http://php.net/manual/en/language.oop5.iterations.php|Iterator interface]] introduced in PHP5.

Relations (has_many/many_many) are described in [[http://api.silverstripe.org/trunk/sapphire/model/ComponentSet.html|ComponentSet]], a subclass of DataObjectSet.

====== Usage ======

===== Getting the size =====
<code php>$mySet->Count();</code>

===== Getting an single element =====
<code php>
$myFirstDataObject = $mySet->First();
$myLastDataObject = $mySet->Last();
</code>

===== Getting multiple elements =====
<code php>
$mySpecialDataObjects = $mySet->find('Status', 'special');
$startingFromTen = $mySet->getOffset(10);
$tenToTwenty = $mySet->getRange(10, 10);
</code>

===== Getting one property =====
<code php>
$myIDArray = $mySet->column('ID');
</code>


===== Grouping =====
You can group a set by a specific column. Consider using [[SQLQuery]] with a //GROUP BY// statement for enhanced performance.
<code php>$groupedSet = $mySet->groupBy('Lastname');</code>

===== Sorting =====
Sort a set by a specific column. 
<code php>$mySet->sort('Lastname'); //ascending
$mySet->sort('Lastname', 'DESC'); //descending</code>

This works on the object itself, so do NOT do something like this:
<code php>$sortedSet = $mySet->sort('Lastname'); //ascending</code>

===== Merge with other DataObjectSets =====
<code php>
$myFirstSet->merge($mySecondSet);
// $myFirstSet now contains all combined values
</code>

===== Mapping for Dropdowns =====
When using [[DropdownField]] and its numerous subclasses to select a value from a set, you can easily map the records to a compatible array:
<code php>
$map = $mySet->toDropDownMap('ID', 'Title');
$dropdownField = new DropdownField('myField', 'my label', $map);
</code>

===== Converting to array =====
<code php>$myArray = $mySet->toArray();</code>

===== Output as HTML-list =====
Use [[http://doc.silverstripe.com/assets/classes/default/DataObjectSet.html#buildNestedUL|buildNestedUL]] to return a nested unordered list out of a "chain" of DataObject-relations.

===== Checking for existence =====
It is good practice to check for empty sets before doing any iteration.
<code php>
$mySet = DataObject::get('Players');
if($mySet->exists()) foreach($mySet as $player)
// ...
</code>


===== Paging =====
DataObjects have native support for dealing with **pagination**.
See //setPageLimits//, //setPageLength//, etc.

FIXME Complete pagination documentation


====== API Documentation ======
[[http://api.silverstripe.org/trunk/sapphire/model/DataObjectSet.html|Click here for the API documentation]].