==== External connector tutorial ====

This tutorial will provide an insight into creating an integration with an External Content provider. External Content providers can be any system that has some kind of PHP API for retrieving content, typically hierarchical data sets of some form. 

For this tutorial, we are going to create an External Content provider that uses the filesystem as its source. A complete download of this content is available in the filesystem-connector module. 

The external-content module provides most of the framework needed for having your external content appear and be usable in the system, so there's only a few things you need to do to hook in your custom provider.


==== The module ====

Create a new module by creating a folder structure like below

{{:modules:external-content-folder-structure.png|:modules:external-content-folder-structure.png}}


==== Creating the Content Source ====

First thing to create is a child of ExternalContentSource, which is the class that will be responsible for being the gateway to the external content. 

	class FileSystemContentSource extends ExternalContentSource
	{
		public static $db = array(
			'FolderPath' => 'Varchar(255)',
		);
		//
		public function getCMSFields()
		{
			$fields = parent::getCMSFields();
			$fields->addFieldToTab('Root.Main', new TextField('FolderPath', _t('FileSystemContentSource.FOLDER_PATH', 'Folder Path')));
			return $fields;
		}
	}

Also, we'll define our content item class which we'll revist soon

	class FileSystemContentItem extends ExternalContentItem
	{
	}

We're going to be reading content from a folder path, so we're defining that this content source should have a single property "FolderPath" for the user to specify where the content is to come from. 

Go ahead and run a /dev/build, you should now be able to create an instance of your external provider.



{{:modules:external-content-new-provider.png|:modules:external-content-new-provider.png}}

==== Making it return Content Items ====

There's a few methods the FileSystemContentSource must implement

  * getObject($id)
  * stageChildren()

External Content sources ''provide'' content to SilverStripe; they do this by determining how to interpret a request for one of the items it has provided and returning that to SilverStripe, and subsequently objects contained by that item. 

> Under the covers, the external-content module uses the concept of compound IDs; these are IDs of the form of a number (the SilverStripe ID of the external content source) followed by a unique identifier of the remote system. So, a compound ID for a filesystem might be something like 5|/home/marcus/development. A word of warning; some characters are sensitive when used in URLs (such as the '/' character). There's a handy 'encodeId()' and 'decodeId()' method pair in ExternalContentSource that can be used to switch between the two (note; this needs further work!). 

=== getObject ===

getObject is used to return a DataObject to SilverStripe that is a representation of a remote content item. It is passed a single item, that being the unique id of an object in the remote system. In our module, this will be the file system path underneath the ''FolderPath'' property. So, the method definition looks like

	public function getObject($id)
	{
		$remoteId = $this->decodeId($id);
		// TODO: Add safety things in here to make sure that our filepath isn't
		// going to list out things like /important/secrets!
		$item = new FileSystemContentItem($this, $remoteId);
	}

> In some more complex implementations, this will actually use a method call like ''getRemoteRepository()'' that returns an object specifically for interacting with the external content source. In this simple example, we're not going to complicate things just yet. 

=== stageChildren ===

> When you make a call to the Children() method of a SilverStripe data object, the stageChildren method is called to retrieve the raw listing of children that the data object has (further processing then determines what a user can actually view). With our content source, we're not going to be looking for children in the SilverStripe database; instead, an external content source is going to retrieve its children from the root folder defined in ''FolderPath''. So, the children of the FileSystemContentSource is just the children of the top level FileSystemContentItem (which happens to be the '/' path). Our stageChildren() method looks like

	public function stageChildren()
	{
		$id = $this->encodeId('/');
		$root = $this->getObject($id);
		return $root ? $root->stageChildren() : null;
	}


==== The FileSystemContentItem ====

Now we want to actually retrieve content and metadata from the file system to show through to SilverStripe. When created, FileSystemContentItems are passed a reference to their remote content source and the ID that represents this object in the external content source. For FileSystemContentItems, this is the path to the item relative to the FolderPath in the content source. The base ExternalContentItem class automatically sets the following properties on creation

  * '''externalId''' - the unique id in the remote system
  * '''ID''' - the SilverStripe ID 
  * '''source''' - The source ExternalContentSource object

=== Setting metadata === 

It will then call the 'init()' method, which should be used to initialise the object with data from the external content source. The ExternalContentItem defines a 'remoteProperties' map which is automatically accessible by the __set and __get magic methods. So, for our simple item, we're going to populate with some simple metadata loaded from the file. 

	public function init()
	{
		$filePath = realpath($this->source->FolderPath . $this->externalId);
		$this->Name = basename($filePath);
		$this->FilePath = $filePath;
		$this->LastEdited = date('Y-m-d H:i:s', filemtime($filePath));
		$this->Created = date('Y-m-d H:i:s', filectime($filePath));
	}

=== Retrieving Children ===

The other main thing a content item must do is return a list of its children. This is done simply by returning a list of all the child items of the folder

	public function stageChildren()
	{
		$filePath = $this->FilePath;
		$children = new DataObjectSet();
		if (is_dir($filePath)) {
			$files = scandir($filePath);
			foreach ($files as $fname) {
				if ($fname == '.' || $fname == '..') continue;
				$id = $this->source->encodeId($this->externalId . '/' . $fname);
				$children->push($this->source->getObjecT($id));
			}
		}
		return $children;
	}

Additionally, to help out the SilverStripe tree, we'll add an additional field for determining how many children this item has

	public function numChildren()
	{
		$children = $this->Children();
		return $children->Count();
	}

You should now be able to view files in the CMS!





==== Viewing on the frontend ====

Let's now hook things up to be able to browse content items on the frontend. To do this, we'll need to add a couple of new methods, and a couple of templates

First, we need a way for external places to get the 'root' element of a content source, so we'll add a getRoot() method to FileSystemContentSource

	public function getRoot()
	{
		return $this->getObject('');
	}

Also, to be able to know what templates to use for rendering, the application needs to know what Type of file we're trying to view, so we'll add a 'getType' method to FileSystemContentItem


	public function getType()
	{
		return $this->numChildren() ? 'folder' : 'file';
	}

We could enhance this by using the file's content type, but that's left for later exercise. 

Now, we need some templates to tell the system what to show when browsing a file vs a folder, so add a "templates/Layout" folder (note, these can then be overridden in your theme). First, create ExternalContent_FileSystemContentItem_folder.ss and add the following template

	<style type="text/css">
	.fileTable { width: 70%; border: none; border-collapse: collapse; }
	.fileTable th { text-align: center; font-weight: bold; padding: 1em; }
	.fileTable td { padding: 1em; }
	</style>
	<h2>$Title</h2>
	$Title has $Children.Count child items
	<% if Children %>
	<table class="fileTable">
		<thead>
			<tr>
				<th></th>
				<th>Name</th>
				<th>Size</th>
			</tr>
		</thead>
		<tbody>
		<% control Children %>
			<tr>
				<td><img src="<% if Type == file %>jsparty/tree/images/page-file.gif<% else %>jsparty/tree/images/page-closedfolder.gif<% end_if %>" /></td>
				<td><a href="<% if Type == file %>$DownloadLink<% else %>$Link<% end_if %>">$Name</a></td>
				<td><% if Type == file %>$Size<% end_if %></td>
			</tr>
		<% end_control %>
		</tbody>
	</table>
	<% end_if %>

The above doesn't ever link to a file, but so that users can link to a file from the wysiwyg, lets create a template for that too

<source lang="ss">
	<h2>$Title</h2>
	<p><a href="$DownloadLink">Download now</a></p>
</source>

Finally, so we can download files (the DownloadLink above), we need to be able to stream the content to the user. Add the following to FileSystemContentItem

	public function streamContent()
	{
		$filePath = $this->FilePath;
		if (file_exists($filePath)) {
			header("Content-Disposition: atachment; filename=$this->Name");
			header("Content-Type: application/octet-stream");
			header("Content-Length: ".filesize($filePath));
			header("Pragma: no-cache");
			header("Expires: 0");
			//
		    readfile($filePath);
		    exit;
		} 
	    exit("Failed streaming content");
	}


Now, all you need to do is create an ExternalContentPage in your Site Content tree, and hook it up to your new File System Content tree. Now, browse the content from the frontend!

{{:modules:external-content-page.png|:modules:external-content-page.png}}

{{:modules:external-content-frontend-view.png|:modules:external-content-frontend-view.png}}

Additionally, now that the content has templates for being rendered in, you can link directly to the content via the 'Insert Link' toolbar; simply select the ''External Content'' option and you'll be able to navigate the external content tree. 
{{:modules:external-content-insert-link.png|:modules:external-content-insert-link.png}}




==== Importing content ====

Once you're retrieving your external content, you can also import that into SilverStripe managed data objects. This is especially useful if you're wanting to transform the external content into a format that works better in SilverStripe. Content importing is managed by defining an importer class and several classes to handle the import and transformation of different types of incoming content. 

The importer works by sequentially reading the children of nodes in a tree, and importing them into a location one by one. At each step, the import process figures out why importing method to use based on the type of the node being imported (file or folder), and after each process is finished, it returns a list of any child ContentItems to be subsequently imported, as well as the newly created parent node. This will get clearer as we go.

To start with, we're just going to write an importer that imports directly to the 'files' section of the website. Go ahead and create a new folder "filesystem-content/code/import" and create the FileSystemContentImporter class, along with FileSystemFileImporter and FileSystemFolderImporter.

	class FileSystemContentImporter extends ExternalContentImporter
	{
		public function __construct()
		{
			$this->contentTransforms['file'] = new FileSystemFileImporter();
			$this->contentTransforms['folder'] = new FileSystemFolderImporter();
		}
		protected function getExternalType($item)
		{
			return $item->getType();
		}
	}


Here we've created an importer that knows how to import items of type 'file' or 'folder'. Next up, we need to hook this importer into our ContentSource. Open up FileSystemContentSource and add the following

	public function allowedImportTargets()
	{
		return array('file' => true);
	}
	//
	public function getContentImporter($target=null)
	{
		return new FileSystemContentImporter();
	}

The first method here defines the allowed types of import targets that this content can be imported to, file or sitetree. The second method returns a ContentImporter object suitable for the given content importer target - in our case, we are only importing to the Files section, so we don't need to handle this scenario. 

Note that if you have the queuedjobs module installed, you can create a 'QueuedFileSystemContentImporter' class that extends from QueuedExternalContentImporter. You still return the "FileSystemContentImporter" from the ContentSource, but the system will automatically detect the presence of the queued implementation when executing and queue a job to use that if possible. 

=== Folder Importer ===

Next up, we'll define the importers themselves, the actual bulk of the processing work. Define the skeleton class for FileSystemFolderImporter

	class FileSystemFolderImporter implements ExternalContentTransformer
	{
		public function transform($item, $parentObject, $duplicateStrategy)
		{
		}
	}

What we're wanting to do is 

Get the existing children of the folder (these are going to be returned as part of our result)

	$folderChildren = $item->stageChildren();

See if the item to be imported already exists, and depending on the $duplicateStrategy handle it appropriately

	$newFolder = new Folder();
	$parentId = $parentObject ? $parentObject->ID : 0;
	$existing = DataObject::get_one('File', '"ParentID" = \''.Convert::raw2sql($parentId).'\' and "Name" = \''.Convert::raw2sql($item->Title).'\'');
	if ($existing && $duplicateStrategy == ExternalContentTransformer::DS_SKIP) {
		// just return the existing children
		return new TransformResult($existing, $pageChildren);
	} else if ($existing && $duplicateStrategy == ExternalContentTransformer::DS_OVERWRITE) {
		$newFolder = $existing;
	}

Create/update an item in the CMS with the metadata from the ContentItem
	$newFolder->Name = $item->Title;
	$newFolder->Title = $item->Title;
	$newFolder->MenuTitle = $item->Title;
	$newFolder->ParentID = $parentObject->ID;
	$newFolder->Sort = 0;
	$newFolder->write();


Create the new folder on the file system

	if(!file_exists($newFolder->getFullPath())) {
		mkdir($newFolder->getFullPath(),Filesystem::$folder_create_mask);
	}

Return the appropriate result

	return new TransformResult($newFolder, $pageChildren);

=== File Importer ===

The File importer follows a similar pattern

	class FileSystemFileImporter implements ExternalContentTransformer
	{
		public function transform($item, $parentObject, $duplicateStrategy)
		{
		}
	}

First, see if the file exists, or create a new one, depending on the $duplicateStrategy

		$newFile = new File();
		$folderPath = $parentObject->getRelativePath();
		$parentId = $parentObject ? $parentObject->ID : 0;
		$filter = 'ParentID = \''.Convert::raw2sql($parentId).'\' and Title = \''.Convert::raw2sql($item->Name).'\'';
		$existing = DataObject::get_one('File', $filter);
		if ($existing && $duplicateStrategy == ExternalContentTransformer::DS_SKIP) {
			// just return the existing children
			return new TransformResult($existing, null);
		} else if ($existing && $duplicateStrategy == ExternalContentTransformer::DS_OVERWRITE) {
			$newFile = $existing;
		}

Next, populate some metadata

	$newFile->Name = $item->Name;
	$newFile->Title = $item->Name;
	$newFile->MenuTitle = $item->Name;

Then, we're wanting to actually upload the file content from disk. For this, there's a utility class in the external-content module that performs all the legwork

	$size = filesize($item->FilePath);
	$details = array(
		'size' => $size,
		'name' => $item->Name,
		'tmp_name' => $item->FilePath
	);
	// External Content utility class
	$upload = new FileLoader();
	$folderPath = trim(substr($folderPath, strpos($folderPath, '/')), '/');
	$upload->loadIntoFile($details, $newFile, $folderPath);

Then return the result!

	return new TransformResult($newFile, null);

One extra piece of functionality that would be nice is to determine whether we should create the item as a file or an image, so we'll change a bit of code here

	$newFile = new File()

becomes

	$newFile = $this->getTypeForFile($item->Name);

and add a method 

	protected function getTypeForFile($filename)
	{
		static $images = array('jpeg', 'jpg', 'bmp', 'png', 'gif');
		$ext = strtolower(substr(strrchr($file_name, "."), 1));
		return in_array($ext, $images) ? new Image() : new File();
	}

Finally, we have the following interface available

{{:modules:external-content-import-files.png|:modules:external-content-import-files.png}}

And the following content once the import is complete

{{:modules:external-content-imported-filelist.png|:modules:external-content-imported-filelist.png}}
