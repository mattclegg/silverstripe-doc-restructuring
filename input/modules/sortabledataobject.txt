==== Introduction ====

The SortableDataObject module adds drag-and-drop sortable bevhaviour to any dataobject of your choice. The sorting takes place not in the CMS, but rather on the front end for logged in administrators. No javascript code or PHP functions are necessary. It is all handled transparently by the module.

{{:modules:sdo.jpg|:modules:sdo.jpg}}

==== Requirements ====

Silverstripe 2.3 or higher







==== Installation ====

Drop the //sortable_dataobject// folder in your Silverstripe root. No database build is necessary until you have added sortable classes in your //_config.php// file. (See below).

==== Configuration ====

The **_config.php** file in the top level of //sortable_dataobject// contains two functions necessary to get you started.

//sortable_dataobject/_config.php//
<code php>
<?php

Object::add_extension('ComponentSet','SortableDataObjectSet');
Object::add_extension('DataObjectSet','SortableDataObjectSet');
Object::add_extension('Page_Controller','SortableController');

// Configure below this line

SortableDataObject::set_sorting_permission('CMS_ACCESS_CMSMain');
SortableDataObject::add_sortable_classes(array(
	// List all sortable classnames here e.g.
	// 'MyDataObject', 'MyOtherDataObject'
));

?>

</code>


=== SortableDataObject::set_sorting_permission($permission) === 
Use this function to set the permission level required to get the sorting feature on a web page with sortable dataobjects. By default, this is set to the highest level, "ADMIN." Another option would be //SortableDataObject::set_sorting_permission('CMS_ACCESS_CMSMain')//

=== SortableDataObject::add_sortable_class($className) === 
Use this function to add the name of a class to qualify as sortable.

=== SortableDataObject::add_sortable_classes(array $classNames) === 
A wrapper function for //SortableDataObject::add_sortable_class//. Takes an array of classnames for multiple additions.

**You must run /dev/build after adding a new sortable class!**

==== Templating ====

In order to take advantage of the sorting features, you must use some special tags available to DataObjects and DataObjectSets with sortable behaviour. Let's look at some examples:

=== Sortable list items ===

<code html>
{$MyWidgets.BeginSortableUL}
  <% control MyWidgets %>
   {$LI}<h3>$Name</h3><p>$Description</p>{$_LI}
  <% end_control %>
{$MyWidgets.EndSortableUL}
</code>

=== Sortable DIVs ===

<code html>
{$MyWidgets.BeginSortableDIV}
  <% control MyWidgets %>
   {$DIV}<h3>$Name</h3><p>$Description</p>{$_DIV}
  <% end_control %>
{$MyWidgets.EndSortableDIV}
</code>

Let's look at what's going on here.

== $MyWidgets.BeginSortableUL or $MyWidgets.BeginSortableDIV == 
These functions write out the correct markup for an unordered list or DIV container tag to qualify for javascript sorting. Because they are functions of the DataObjectSet (in this case $MyWidgets), they must be called outside of the control on the DataObjectSet itself.

== $LI or $DIV == 
Writes the correct markup for opening a sortable list item or DIV.

== $_LI or $_DIV ==
Closes the respective list item or DIV tag.

== $MyWidgets.EndSortableUL or $MyWidgets.EndSortableDIV ==
Closes the respective unordered list or DIV container.

==== Usage ====

If you're logged in and have the requisite permissions, you should be able to start sorting right away. Otherwise, just add **/sort/** to the URL to log in and get redirected, e.g. // www.mysite.com/my-sortable-page/sort/ //

==== Common questions ====

=== How does it work? ===

When you add a sortable class to SortableDataObject, it qualifies for a new database field called **SortOrder**. The functions //BeginSortableUL// and //BeginSortableDIV// trigger requirements to support a jQuery sorting UI, and force a sort on the DataObjectSet of **SortOrder ASC**. The AJAX request is handled by an extension of Page_Controller that pairs IDs with their respective sorts. The classname of the object being sorted is identified by the CSS class of the sortable container.

=== What's with all the curly braces? ===

Of course you don't need them. It's just a way of distinguishing content-containing variables from structure-containing variables. Silverstripe will pare the template the same with or without the curly braces.

=== Why bother with $_LI and $_DIV? They just return closing tags! ===

This is of course another tag that is entirely optional and is only used for consistency.

==== Support ====

Support is available through the Silverstripe forum.