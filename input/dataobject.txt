====== Introduction ======
A single database record & abstract class for the data-access-model. 

====== Usage ======
  * [[datamodel]]: The basic pricinples
  * [[objectmodel]]: Casting and special property-parsing
  * [[http://api.silverstripe.org/trunk/sapphire/model/DataObject.html|DataObject]]: A "container" for DataObjects

===== Basics =====
The call to ''DataObject->getCMSFields()'' is the centerpiece of every data administration interface in Silverstripe, which returns a [[http://api.silverstripe.org/trunk/forms/core/FieldSet.html|FieldSet]] suitable for a [[http://api.silverstripe.org/trunk/forms/core/Form.html|Form]] object. If not overloaded, we're using ''@link scaffoldFormFields()'' to automatically generate this set. To customize, overload this method in a subclass or decorate onto it by using ''DataObjectDecorator->updateCMSFields()''.

<code php>
class MyPage extends Page {
  function getCMSFields() {
    $fields = parent::getCMSFields();
    $fields->addFieldToTab('Root.Content',new CheckboxField('CustomProperty'));
    return $fields;
  }
}
</code>

====== Scaffolding Formfields ======
These calls retrieve a [[http://api.silverstripe.org/trunk/forms/core/FieldSet.html|FieldSet]] that can be used to add or edit entries from the DataObject.  Use the following examples to get an appropriate [[http://api.silverstripe.org/trunk/forms/core/FieldSet.html|FieldSet]] for the area where you intend to work with the scaffolded form.

===== For the CMS =====
// Requirements: SilverStripe 2.3.//
<code php>
$fields = singleton('MyDataObject')->getCMSFields();
</code>

===== For the Frontend =====
Used for simple frontend forms without relation editing or [[TabSet]] behaviour. Uses ''scaffoldFormFields()'' by default. To customize, either overload this method in your subclass, or decorate it by ''DataObjectDecorator->updateFormFields()''.

// Requirements: SilverStripe 2.3.//

<code php>
$fields = singleton('MyDataObject')->getFrontEndFields();
</code>

====== Customizing Scaffolded Fields ======
// Requirements: SilverStripe 2.3.//

This section covers how to enhance the default scaffolded form fields from above.  It is particularly useful when used in conjunction with the [[ModelAdmin]] in the CMS to make relevant data administration interfaces.


===== Searchable Fields =====
// Requirements: SilverStripe 2.3.//

The ''$searchable_fields'' property uses a mixed array format that can be used to further customize your generated admin system. The default is a set of array values listing the fields.

Example: Getting predefined searchable fields
<code php>
$fields = singleton('MyDataObject')->searchableFields();
</code>

Example: Simple Definition
<code php>
class MyDataObject extends DataObject {
   static $searchable_fields = array(
      'Name',
      'ProductCode'
   );
}
</code>

Searchable fields will be appear in the search interface with a default form field (usually a TextField) and a default search filter assigned (usually an ExactMatchFilter). To override these defaults, you can specify additional information on ''$searchable_fields'':

<code php>
class MyDataObject extends DataObject {
   static $searchable_fields = array(
       'Name' => 'PartialMatchFilter',
       'ProductCode' => 'NumericField'
   );
}
</code>

If you assign a single string value, you can set it to be either a FormField or SearchFilter. To specify both, you can assign an array:

<code php>
class MyDataObject extends DataObject {
   static $searchable_fields = array(
       'Name' => array(
          'field' => 'TextField',
          'filter' => 'PartialMatchFilter',
       ),
       'ProductCode' => array(
           'title' => 'Product code #',
           'field' => 'NumericField',
           'filter' => 'PartialMatchFilter',
       ),
   );
}
</code>

To include relations (''$has_one'', ''$has_many'' and ''$many_many'') in your search, you can use a dot-notation.
<code php>
class Team extends DataObject {
  static $db = array(
    'Title' => 'Varchar'
  );
  static $many_many = array(
    'Players' => 'Player'
  );
  static $searchable_fields = array(
      'Title',
      'Players.Name',
   );
}
class Player extends DataObject {
  static $db = array(
    'Name' => 'Varchar',
    'Birthday' => 'Date'
  );
  static $belongs_many_many = array(
    'Teams' => 'Team'
  );
}
</code>

===== Summary Fields =====
// Requirements: SilverStripe 2.3.//

Summary fields can be used to show a quick overview of the data for a specific DataObject record. Most common use is their display as table columns, e.g. in the search results of a [[ModelAdmin]] CMS interface.

Example: Getting predefined summary fields
<code php>
$fields = singleton('MyDataObject')->summaryFields();
</code>

Example: Simple Definition
<code php>
class MyDataObject extends DataObject {
  static $db = array(
    'Name' => 'Text',
    'OtherProperty' => 'Text',
    'ProductCode' => 'Int',
  ); 
  static $summary_fields = array(
      'Name',
      'ProductCode'
   );
}
</code>

To include relations in your summaries, you can use a dot-notation.
<code php>
class OtherObject extends DataObject {
  static $db = array(
    'Title' => 'Varchar'
  );
}
class MyDataObject extends DataObject {
  static $db = array(
    'Name' => 'Text'
  );
  static $has_one = array(
    'OtherObject' => 'OtherObject'
  );
   static $summary_fields = array(
      'Name',
      'OtherObject.Title'
   );
}
</code>

====== API Documentation ======
[[http://api.silverstripe.org/trunk/sapphire/core/DataObject.html|Click here for the API documentation]].